package DBDAO;

import java.sql.*;
import java.util.ArrayList;
import java.util.NoSuchElementException;

import base.*;
import exceptionForCouponSystem.CouponException;
import mainProgram.ConnectionPool;
import DAO.CouponDAO;

public class CouponDBDAO implements CouponDAO{
	//Creating tools from imported java.sql classes to work with database:
	Connection connection;
	PreparedStatement ps;
	ResultSet rs;
	//getting an instance of a connection from the ConnectionPool:
	ConnectionPool pool;
	/**
	 * Constructor (enables to throw the exception on to the main)
	 * @throws CouponException 
	 */
	public CouponDBDAO() throws CouponException{		
		pool=ConnectionPool.getInstance();
	}
		/**
	 * Creates coupons in the Data-base. The coupon ID is generated by the data-base and is returned to the coupon object
	 * @param coupon
	 * @throws CouponException
	 */
	@Override
	public void createCoupon(Coupon coupon) throws CouponException{
		try {
			connection=pool.getConnection();
			ps = connection.prepareStatement("INSERT INTO APP.COUPON (IMAGE,PRICE,MESSAGE," +
					"C_TYPE,AMOUNT,END_DATE,START_DATE,TITLE) VALUES(?,?,?,?,?,?,?,?)",Statement.RETURN_GENERATED_KEYS);
		
			ps.setString(1, coupon.getImage());
			ps.setDouble(2, coupon.getPrice());
			ps.setString(3, coupon.getMessage());
			ps.setString(4, coupon.getType().name());
			ps.setInt(5, coupon.getAmount());
			ps.setDate(6, coupon.getEndDate());
			ps.setDate(7, coupon.getStartDate());
			ps.setString(8,coupon.getTitle());
			ps.executeUpdate();
			rs = ps.getGeneratedKeys();
			
			if (rs != null && rs.next()) {
			    Long key = rs.getLong(1);
			    coupon.setId(key);
			}
		} catch (SQLException e) {
			throw new CouponException("problem with connection to the database");			
		} finally {
			pool.returnConnection(connection);
		}
	}
	/**
	 * This function removes the coupon from the database according to the coupon ID.
	 * @param coupon
	 * @throws CouponException 
	 */
	@Override
	public void removeCoupon(Coupon coupon) throws CouponException {
		try {
			connection=pool.getConnection();
			ps = connection.prepareStatement("DELETE FROM APP.COUPON WHERE ID=?");
			ps.setLong(1, coupon.getId());
		    ps.execute();
		} catch (SQLException e) {
			throw new CouponException("problem with connection to the database");	
		} finally {
			pool.returnConnection(connection);
		}
	}
/**
 	* This function updates all of the coupon details. the coupon is identified according to its ID 
 *@param coupon
 *@throws CouponException 
 */
	@Override
	public void updateCoupon(Coupon coupon) throws CouponException {
		try {
			connection=pool.getConnection();
			ps = connection.prepareStatement("UPDATE APP.COUPON SET IMAGE=?,PRICE=?,MESSAGE=?,C_TYPE=?,AMOUNT=?,END_DATE=?,START_DATE=?,TITLE=? WHERE ID=?");
			ps.setString(1, coupon.getImage());
			ps.setDouble(2, coupon.getPrice());
			ps.setString(3, coupon.getMessage());
			ps.setString(4, coupon.getType().name());
			ps.setInt(5, coupon.getAmount());
			ps.setDate(6, coupon.getEndDate());
			ps.setDate(7, coupon.getStartDate());
			ps.setString(8,coupon.getTitle());
			ps.setLong(9, coupon.getId());
			ps.executeUpdate();
		}catch (SQLException e) {
			throw new CouponException("problem with connection to the database");	
		} finally {
			pool.returnConnection(connection);
		}
	}
	/**
	 * The function returns a hash-set including the details of all coupons in the database
	 *@return ArrayList<Coupon>
	 *@throws CouponException
	 */
	@Override
	public ArrayList<Coupon> getAllCoupon() throws CouponException {
		ArrayList<Coupon> allCoupon=new ArrayList<Coupon>();			
			try {
				connection=pool.getConnection();
				ps = connection.prepareStatement("SELECT * FROM APP.COUPON");
				rs = ps.executeQuery();
				while(rs.next()){
					allCoupon.add(new Coupon(rs.getInt("ID"),
						rs.getString("TITLE"),
						rs.getDate("END_DATE"),
						rs.getInt("AMOUNT"),
						CouponType.valueOf(rs.getString("C_TYPE")),
						rs.getString("MESSAGE"),
						rs.getDouble("PRICE"),
						rs.getString("IMAGE"),
						rs.getDate("START_DATE")));
			}
			} catch (SQLException e) {
				throw new CouponException("problem with connection to the database");	
			} finally {
				pool.returnConnection(connection);
			}
		return (ArrayList<Coupon>) allCoupon;
	}
	/**
	 * This function returns true if there is in the database a coupon 
	 * with the indicated name otherwise it returns false
	 *@param name
	 *@return true
	 *@throws CouponException
	 */
	public boolean isCoupon(String name) throws CouponException{
		try{
			connection=pool.getConnection();
			ps = connection.prepareStatement("SELECT TITLE FROM APP.COUPON WHERE TITLE='"+name+"'");
			rs = ps.executeQuery();
			if(rs.next())
				if(name.equals(rs.getString(1))){
					
					return true;}
			
			return false;
			
		} catch (SQLException e) {
			
			return true;	
		} finally {
			pool.returnConnection(connection);
		}
}
	/**
	 * This function returns all coupons from the database (works with following functions) 
	 * the function gets the tables to search within (including JOIN tables)
	 * and the parameter according which the search will be done and the condition
	 * @param table
	 * @param where
	 * @param condition
	 * @return ArrayList<Coupon>
	 */
	private ArrayList<Coupon> selectCoupons(String table,String where,String condition)  throws CouponException  {
		ArrayList<Coupon> allCoupon=new ArrayList<>();
		try {	
			connection=pool.getConnection();
			ps = connection.prepareStatement("SELECT * FROM "+table+" WHERE "+where+condition);
			rs = ps.executeQuery();
			while(rs.next()){
				allCoupon.add(new Coupon(rs.getLong("ID"),
						rs.getString("TITLE"),
						rs.getDate("END_DATE"),
						rs.getInt("AMOUNT"),
						CouponType.valueOf(rs.getString("C_TYPE")),
						rs.getString("MESSAGE"),
						rs.getDouble("PRICE"),
						rs.getString("IMAGE"),
						rs.getDate("START_DATE")));
			}
		} catch (Exception e) {
			throw new CouponException("problem with connection to the database");	
		} finally {
			pool.returnConnection(connection);
		}
		return (ArrayList<Coupon>) allCoupon;
		
	}
		/**
	 * The function returns all coupons of the indicated type:
	 * @param type
	 * @return selectCoupons
	 * @throws CouponException
	 */
	@Override
	public ArrayList<Coupon> getCopounByType(CouponType type) throws CouponException{
		return selectCoupons("APP.COUPON","C-TYPE","='"+type.toString()+"'");
	}
	/**
	 * The function returns the coupon details by the indicated id
	 * @param id
	 * @return selectCoupons
	 * @throws CouponException
	 */
	@Override
	public Coupon getCoupon(long id) throws CouponException{
		try{
			return selectCoupons("APP.COUPON","ID","="+id).iterator().next();
		}catch(NoSuchElementException e){
			throw new CouponException("the coupon Id #"+id+" was not found in the database"); 
		}
	}
	/**
	 * The function returns all coupons purchased by the provided customer
	 * @param customer
	 * @return selectCoupons
	 * @throws CouponException
	*/
	@Override
	public ArrayList<Coupon> getCustomerCoupons(Customer customer) throws CouponException   {
		return selectCoupons("app.CUSTOMER_COUPON JOIN app.COUPON ON COUPON_ID=ID","CUST_ID ","="+customer.getId());
	}
	/**
	 * The function returns all coupons purchased by the provided customer
	 * with the indicated type
	 * @param customer
	 * @param type
	 * @return selectCoupons
	 * @throws CouponException
	 */
	@Override
	public ArrayList<Coupon> getAllPurchasedCouponsByType(Customer customer ,CouponType type) throws CouponException   {
		return selectCoupons("app.COUPON JOIN APP.CUSTOMER_COUPON ON ID=COUPON_ID","CUST_ID ","="+customer.getId()+" AND C_TYPE='"+type.toString()+"'");
	}
	/**
	 * The function returns all coupons purchased by the provided customer
	 * with the indicated max price
	 * @param customer
	 * @param price
	 * @return selectCoupons
	 * @throws CouponException
	 */
	@Override
	public ArrayList<Coupon> getAllPurchasedCouponsByPrice(Customer customer,double price) throws CouponException   {
		return selectCoupons("COUPON JOIN CUSTOMER_COUPON ON ID=COUPON_ID","CUST_ID ","="+customer.getId()+" AND PRICE<="+price);

	}
	/**
	 * The function returns all coupons of the indicated company
	 * @param company
	 * @return selectCoupons
	 * @throws CouponException
	 */
	@Override
	public ArrayList<Coupon> getCompanyCoupons(Company company) throws CouponException   {
		return selectCoupons("APP.COMPANY_COUPON JOIN APP.COUPON ON COUPON_ID=ID","COMP_ID","="+company.getId());
	}
	/**
	 * The function returns all coupons by the provided company
	 * with the indicated type
	 * @param type
	 * @param company
	 * @return selectCoupons
	 * @throws CouponException
	 */
	@Override
	public ArrayList<Coupon> getCouponByType(Company company, CouponType type) throws CouponException   {
		return selectCoupons("APP.COMPANY_COUPON JOIN APP.COUPON ON COUPON_ID=ID","C_TYPE","='"+type.toString()+"' AND COMP_ID="+company.getId());

	}
	/**
	 * The function returns all coupons by the provided company
	 * up until the indicated max price
	 * @param company
	 * @param price
	 * @return selectCoupons
	 * @throws CouponException
	 */
	@Override
	public ArrayList<Coupon> getCouponByMaxPrice(Company company, double price) throws CouponException   {
		return selectCoupons("APP.COMPANY_COUPON JOIN APP.COUPON ON COUPON_ID=ID","COMP_ID ","="+company.getId()+" AND PRICE<="+price);

	}
	/**
	 * The function returns all coupons by the provided company
	 * up until the specified end date
	 * @param company
	 * @param endDate
	 * @return selectCoupons
	 * @throws CouponException
	 */
	@Override
	public ArrayList<Coupon> getCouponByLateDate(Company company, Date endDate) throws CouponException   {
		return selectCoupons("APP.COMPANY_COUPON JOIN APP.COUPON ON COUPON_ID=ID","COMP_ID","="+company.getId()+" AND END_DATE<='"+endDate+"'");
	}
}